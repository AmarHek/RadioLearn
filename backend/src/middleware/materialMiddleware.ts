import { MaterialDB } from "../models";
import {NextFunction, Response} from "express";
import * as fs from "fs";
import {Category, TopLevel} from "../models/template.model";

export function checkDuplicateMainScan(req: any, res: Response, next: NextFunction) {
    if (req.files.mainScan) {
        const mainName = req.files.mainScan[0].filename;
        MaterialDB.countDocuments({"scans.mainScan.filename": mainName})
            .then((count) => {
                if (count > 0) {
                    // if duplicate, delete folder generated by upload
                    fs.rmSync(req.files.mainScan[0].destination, {recursive: true});
                    return res.status(400).send(
                        {message: "Duplicate main scan detected, not saving " + mainName});
                } else {
                    next();
                }
        });
    } else {
        next();
    }
}

export function checkDuplicateLateralScan(req: any, res: Response, next: NextFunction) {
    if (req.files.lateralScan) {
        const lateralName = req.files.lateralScan[0].filename;
        MaterialDB.countDocuments({"scans.lateralScan.filename": lateralName})
            .then((count) => {
                if (count > 0) {
                    // if duplicate, delete folder generated by upload
                    fs.rmSync(req.files.lateralScan[0].destination, {recursive: true});
                    return res.status(400).send(
                        {message: "Duplicate lateral scan detected, not saving " + lateralName});
                } else {
                    next();
                }
            });
    } else {
        next();
    }
}

export function checkDuplicatePreScan(req: any, res: Response, next: NextFunction) {
    if (req.files.preScan) {
        const preName = req.files.preScan[0].filename;
        MaterialDB.countDocuments({"scans.mainScan.filename": preName})
            .then((count) => {
                if (count > 0) {
                    // if duplicate, delete folder generated by upload
                    fs.rmSync(req.files.preScan[0].destination, {recursive: true});
                    return res.status(400).send(
                        {message: "Duplicate pre scan detected, not saving " + preName});
                } else {
                    next();
                }
            });
    } else {
        next();
    }
}

export function updatePartsBackwardsCompatible(newParts: TopLevel[] , oldParts: TopLevel[]): TopLevel[] {
    // Principle: New Parts (empty) are basis, i.e. all fields in new parts are absolute
    // We loop through new parts. Everything that is not a category can be skipped
    for (const newPart of newParts) {
        if (newPart.kind === "category") {
            // find corresponding category in old parts
            const oldPart = oldParts.find( (part) => {
                if (part.kind === "category") {
                    if (part.name === newPart.name) {
                        return part;
                    }
                }
            });

            // if oldPart is not undefined, fill out boxes of newPart
            if (oldPart !== undefined) {
                for (const sel of newPart.selectables) {
                    // do something
                }
            }
        }
    }

    return newParts;
}